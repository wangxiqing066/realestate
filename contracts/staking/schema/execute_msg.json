{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Update config parameters",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "$ref": "#/definitions/NewConfig"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unbond will start the unbonding process for the given number of tokens. The sender immediately loses weight from these tokens, and can claim them back to his wallet after `unbonding_period`",
      "type": "object",
      "required": [
        "unbond"
      ],
      "properties": {
        "unbond": {
          "type": "object",
          "required": [
            "tokens"
          ],
          "properties": {
            "tokens": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim is used to claim your native tokens that you previously \"unbonded\" after the contract-defined waiting period (eg. 1 week)",
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim without waiting period, but with percentage fee",
      "type": "object",
      "required": [
        "instant_claim"
      ],
      "properties": {
        "instant_claim": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw reward",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This accepts a properly-encoded ReceiveMsg from a cw20 contract",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw ust from smart contract by owner",
      "type": "object",
      "required": [
        "ust_withdraw"
      ],
      "properties": {
        "ust_withdraw": {
          "type": "object",
          "required": [
            "amount",
            "recipient"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "recipient": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw tokens from smart contract by owner",
      "type": "object",
      "required": [
        "token_withdraw"
      ],
      "properties": {
        "token_withdraw": {
          "type": "object",
          "required": [
            "recipient",
            "token"
          ],
          "properties": {
            "recipient": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "FeeConfig": {
      "type": "object",
      "required": [
        "denom",
        "fee",
        "operation"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/Uint128"
        },
        "operation": {
          "type": "string"
        }
      }
    },
    "NewConfig": {
      "type": "object",
      "properties": {
        "burn_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "distribution_schedule": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Schedule"
          }
        },
        "fee_config": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/FeeConfig"
          }
        },
        "instant_claim_percentage_loss": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "type": [
            "string",
            "null"
          ]
        },
        "staking_token": {
          "type": [
            "string",
            "null"
          ]
        },
        "unbonding_period": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Schedule": {
      "type": "object",
      "required": [
        "amount",
        "end_time",
        "start_time"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "end_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
